#version 460

#include "types.glsl"
#include "voxel_descriptors.glsl"
#include "global_descriptor_set.glsl"


struct CalculatedLightPower {
    vec3 diffuse_strength;
    vec3 specular_strength;
};

CalculatedLightPower calculate_light_power(
    vec3 camera_position,
    vec3 voxel_position,
    vec3 voxel_normal,
    PointLight light,
    float specular_power
) {
    vec3 to_light_vector = light.position.xyz - voxel_position;
    float to_light_distance = length(to_light_vector);
    to_light_vector /= to_light_distance;

    if (to_light_distance > 256.0 || light.color_and_power.w < 0.25)
    {
        return CalculatedLightPower(vec3(0.0), vec3(0.0));
    }

    vec3 view_vector = normalize(camera_position - voxel_position);
    vec3 reflect_vector = 2.0 * dot(to_light_vector, voxel_normal) * voxel_normal - to_light_vector;

    float attenuation = 1.0 / (
        light.falloffs.x +
        light.falloffs.y * to_light_distance +
        light.falloffs.z * to_light_distance * to_light_distance +
        light.falloffs.w * to_light_distance * to_light_distance * to_light_distance);

    vec3 diffuse_strength = max(dot(voxel_normal, to_light_vector), 0.0) * light.color_and_power.rgb * light.color_and_power.w * attenuation;
    vec3 specular_strength = pow(max(dot(reflect_vector, view_vector), 0.0), specular_power) * light.color_and_power.rgb * light.color_and_power.w * attenuation;

    return CalculatedLightPower(diffuse_strength, specular_strength);
}

#define DrivingAxis u32
const u32 DrivingAxis_X = 0;
const u32 DrivingAxis_Y = 1;
const u32 DrivingAxis_Z = 2;

u32 divideEuclidean(u32 lhs, u32 rhs)
{
    const u32 quotient = lhs / rhs;

    if (lhs % rhs < 0)
    {
        return rhs > 0 ? quotient - 1 : quotient + 1;
    }

    return quotient;
}

u32 moduloEuclidean(u32 lhs, u32 rhs)
{
    const u32 remainder = lhs % rhs;

    if (remainder < 0)
    {
        return rhs > 0 ? remainder + rhs : remainder - rhs;
    }

    return remainder;
}

struct GetIdxAndBitResult
{
    u32 idx;
    u32 bit;
};

GetIdxAndBitResult getIdxAndBit(ivec3 p)
{
    const u32 linearIndex = 
        p.x + p.z * 8
        + p.y * 8 * 8;

    return GetIdxAndBitResult(linearIndex / 32, linearIndex % 32);
}

bool isChunkRelativePositionOccupied(u32 parent_chunk, ivec3 pos)
{
    ivec3 relativeCoordinate = ivec3(
        divideEuclidean(pos.x, 64),
        divideEuclidean(pos.y, 64),
        divideEuclidean(pos.z, 64)
    );

    ivec3 relativeLocalPosition = ivec3(
        moduloEuclidean(pos.x, 64),
        moduloEuclidean(pos.y, 64),
        moduloEuclidean(pos.z, 64)
    );

    u32 chunkToLookAt;

    if (relativeCoordinate == ivec3(0))
    {
        chunkToLookAt = parent_chunk;
    }
    else
    {
        chunkToLookAt = in_chunk_data.data[parent_chunk].adjacent_chunks[relativeCoordinate.x + 1][relativeCoordinate.y + 1][relativeCoordinate.z + 1];
    }

    if (any(greaterThan(relativeCoordinate, ivec3(1))) || any(lessThan(relativeCoordinate, ivec3(-1))))
    {
        chunkToLookAt = ~0u;
    }

    ivec3 brickCoordinate = relativeLocalPosition / 8;
    ivec3 brickPosition = relativeLocalPosition % 8;

    MaybeBrickPointer maybePtr = in_brick_maps.map[chunkToLookAt].data[brickCoordinate.x][brickCoordinate.y][brickCoordinate.z];

    if (maybePtr.pointer == ~0u)
    {
        return false;
    }

    GetIdxAndBitResult r = getIdxAndBit(brickPosition);

    if ((in_opacity_bricks.brick[maybePtr.pointer].data[r.idx] & (1u << r.bit)) == 0)
    {
        return false;
    }
    else
    {
        return true;
    }

    
}

bool traceShadowRay(u32 parent_chunk, ivec3 startWorld, ivec3 endWorld)
{
    
    const ivec3 start = startWorld - in_chunk_data.data[parent_chunk].position.xyz;
    const ivec3 end = endWorld - in_chunk_data.data[parent_chunk].position.xyz;

    const ivec3 dir = abs(end - start);
    const ivec3 step = ivec3(
        end.x > start.x ? 1 : -1,
        end.y > start.y ? 1 : -1,
        end.z > start.z ? 1 : -1
    );

    DrivingAxis drivingAxis = 0;
    DrivingAxis errorAxis0 = 0;
    DrivingAxis errorAxis1 = 0;

    if (dir.x >= dir.y && dir.x >= dir.z)
    {
        drivingAxis = DrivingAxis_X;
        errorAxis0  = DrivingAxis_Y;
        errorAxis1  = DrivingAxis_Z;
    }
    else if (dir.y >= dir.x && dir.y >= dir.z)
    {
        drivingAxis = DrivingAxis_Y;
        errorAxis0  = DrivingAxis_X;
        errorAxis1  = DrivingAxis_Z;
    }
    else
    {
        drivingAxis = DrivingAxis_Z;
        errorAxis0  = DrivingAxis_Y;
        errorAxis1  = DrivingAxis_X;
    }

    ivec3 traverse = start;

    int err0 = 2 * dir[errorAxis0] - dir[drivingAxis];
    int err1 = 2 * dir[errorAxis1] - dir[drivingAxis];

    while (traverse[drivingAxis] != end[drivingAxis])
    {
        traverse[drivingAxis] += step[drivingAxis];

        if (err0 >= 0)
        {
            traverse[errorAxis0] += step[errorAxis0];
            err0 -= 2 * dir[drivingAxis];
        }

        if (err1 >= 0)
        {
            traverse[errorAxis1] += step[errorAxis0];
            err1 -= 2 * dir[drivingAxis];
        }

        err0 += 2 * dir[errorAxis0];
        err1 += 2 * dir[errorAxis1];

        if (isChunkRelativePositionOccupied(parent_chunk, traverse))
        {
            return true;
        }
    }

    return false;
}


vec3 exp_strength_falloff(vec3 strengths)
{
    return 1.0 - exp2(-0.25 * strengths);
}

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main()
{
    const u32 global_invocation_index = gl_GlobalInvocationID.x;

    if (global_invocation_index < in_number_of_visible_faces.number_of_visible_faces)
    {
        const u32 this_face_data = in_visible_face_data.data[global_invocation_index].data;
        
        const u32 brick_pointer = bitfieldExtract(this_face_data, 0, 20);
        const u32 face_number   = bitfieldExtract(this_face_data, 20, 9);
        const u32 normal        = bitfieldExtract(this_face_data, 29, 3);

        const uvec3 brick_local_position = uvec3(
            face_number % 8,
            (face_number % 64) / 8,
            face_number / 64
        );

        const u32 parent_chunk = bitfieldExtract(in_brick_parent_info.info[brick_pointer].data, 0, 16);
        const u32 brick_parent_number = bitfieldExtract(in_brick_parent_info.info[brick_pointer].data, 23, 9);

        const uvec3 brick_coordinate = uvec3(
            brick_parent_number % 8,
            (brick_parent_number % 64) / 8,
            brick_parent_number / 64
        );

        const uvec3 chunk_local_position = brick_coordinate * 8 + brick_local_position;

        const Voxel this_voxel = in_material_bricks.brick[brick_pointer]
            .data[brick_local_position.x][brick_local_position.y][brick_local_position.z];

        const VoxelMaterial this_material = in_voxel_materials.material[this_voxel.data];

        // TODO: shouldn't be 0.5 the normal should be removed from this
        const vec3 position_world = vec3(in_chunk_data.data[parent_chunk].position.xyz) + vec3(0.5) + vec3(chunk_local_position);

        vec3 sum_diffuse = vec3(0.0);
        vec3 sum_specular = vec3(0.0);

        for (int x = 0; x < 3; ++x)
        {
            for (int y = 0; y < 3; ++y)
            {
                for (int z = 0; z < 3; ++z)
                {
                    u32 adjacentChunkId = in_chunk_data.data[parent_chunk].adjacent_chunks[x][y][z];

                    if (x == 1 && y == 1 && z == 1)
                    {
                        adjacentChunkId = parent_chunk;
                    }

                    if (adjacentChunkId == ~0u)
                    {
                        continue;
                    }

                    for (int i = 0; i < in_chunk_data.data[adjacentChunkId].number_of_point_lights; ++i)
                    {
                        const bool isFaceInShadow = traceShadowRay(
                            parent_chunk,
                            ivec3(chunk_local_position) + ivec3(unpackNormalId(normal)),
                            ivec3(in_chunk_data.data[adjacentChunkId].lights[i].position.xyz) 
                        );

                        if (!isFaceInShadow)
                        {
                            CalculatedLightPower power = calculate_light_power(
                                in_global_info.camera_position.xyz,
                                position_world,
                                unpackNormalId(normal), 
                                in_chunk_data.data[adjacentChunkId].lights[i],
                                this_material.specular
                            );

                            sum_diffuse += power.diffuse_strength;
                            // #warning no specular
                            sum_specular += power.specular_strength;
                        }
                    }
                }
            }
        }
        

        vec3 realColor = clamp(
            exp_strength_falloff(sum_diffuse) * this_material.diffuse_color.xyz +
            exp_strength_falloff(sum_specular) * this_material.specular_color.xyz,
            0.0,
            1.0
        );

        in_visible_face_data.data[global_invocation_index].color = realColor;
        
    }
}