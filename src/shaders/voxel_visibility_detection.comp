#version 460

#include "global_descriptor_set.glsl"
#include "types.glsl"
#include "voxel_descriptors.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main()
{
    const u32 in_face_brick_data =
        imageLoad(visible_voxel_image, ivec2(gl_GlobalInvocationID.xy)).x;

    if (in_face_brick_data == ~0u)
    {
        return;
    }

    const u32 brick_pointer = bitfieldExtract(in_face_brick_data, 0, 20);
    const u32 face_number   = bitfieldExtract(in_face_brick_data, 20, 9);
    const u32 normal        = bitfieldExtract(in_face_brick_data, 29, 3);

    const uvec3 brick_local_position =
        uvec3(face_number % 8, (face_number % 64) / 8, face_number / 64);

    const u32 face_number_index = face_number / 32;
    const u32 face_number_bit   = face_number % 32;

    const u32 mask = (1u << face_number_bit);
    const u32 prev = atomicOr(
        in_visibility_bricks.brick[brick_pointer].view_dir[normal].data[face_number_index], mask);
    const bool is_first_write = (prev & mask) == 0u;

    if (is_first_write)
    {
        const u32 this_visible_face = atomicAdd(in_global_voxel_data.number_of_visible_faces, 1);

        in_visible_face_data.data[this_visible_face] =
            VisibleFaceData(in_face_brick_data, vec3(0.0));

        if (this_visible_face % 128 == 0)
        {
            atomicAdd(in_global_voxel_data.number_of_indirect_dispatches_x, 1);

            if (this_visible_face == 0)
            {
                in_global_voxel_data.number_of_indirect_dispatches_y = 1;
                in_global_voxel_data.number_of_indirect_dispatches_z = 1;
            }
        }

        face_id_map_write(in_face_brick_data, this_visible_face);
    }
}