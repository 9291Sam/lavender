cmake_minimum_required(VERSION 3.28)
project(lavender VERSION 0.0.0.0)

include(CMakeRC.cmake)
include(FetchContent)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

FetchContent_Declare(glfw
    GIT_REPOSITORY https://github.com/glfw/glfw
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(glfw)

FetchContent_Declare(concurrentqueue
    GIT_REPOSITORY https://github.com/cameron314/concurrentqueue
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(concurrentqueue)


FetchContent_Declare(vma
    GIT_REPOSITORY https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(vma)

FetchContent_Declare(glm
    GIT_REPOSITORY https://github.com/g-truc/glm
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(glm)
target_compile_definitions(glm INTERFACE GLM_FORCE_DEPTH_ZERO_TO_ONE=1)
target_compile_definitions(glm INTERFACE GLM_FORCE_RADIANS=1)
target_compile_definitions(glm INTERFACE GLM_FORCE_SIZE_T_LENGTH=1)
target_compile_definitions(glm INTERFACE GLM_ENABLE_EXPERIMENTAL=1)
 

set(Boost_USE_STATIC_LIBS ON) 
set(Boost_USE_MULTITHREADED ON)  
set(Boost_USE_STATIC_RUNTIME ON) 
set(BOOST_ENABLE_CMAKE ON)
set(BOOST_INCLUDE_LIBRARIES container unordered)

message("Downloading boost, this will take some time!")
FetchContent_Declare(
  Boost
  GIT_REPOSITORY https://github.com/boostorg/boost.git
  GIT_TAG boost-1.86.0
  GIT_SHALLOW TRUE
  SYSTEM
)
FetchContent_MakeAvailable(Boost)

find_package(Vulkan REQUIRED)


add_executable(lavender
    src/main.cpp

    src/game/ec/ec_manager.cpp
    src/game/ec/entity_storage.cpp

    src/game/render/render_manager.cpp
    
    src/game/camera.cpp
    src/game/frame_generator.cpp
    src/game/game.cpp
    src/game/transform.cpp

    src/gfx/vulkan/allocator.cpp
    src/gfx/vulkan/buffer.cpp
    src/gfx/vulkan/device.cpp
    src/gfx/vulkan/frame_manager.cpp
    src/gfx/vulkan/image.cpp
    src/gfx/vulkan/instance.cpp
    src/gfx/vulkan/swapchain.cpp

    src/shaders/shaders.cpp

    src/gfx/renderer.cpp
    src/gfx/window.cpp

    src/util/index_allocator.cpp
    src/util/log.cpp
    src/util/misc.cpp
)

target_include_directories(lavender PUBLIC src)
target_include_directories(lavender SYSTEM PUBLIC ${Vulkan_INCLUDE_DIRS})
target_include_directories(lavender SYSTEM PUBLIC ${vma_SOURCE_DIR}/include)

target_compile_definitions(lavender PUBLIC LAVENDER_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})
target_compile_definitions(lavender PUBLIC LAVENDER_VERSION_MINOR=${PROJECT_VERSION_MINOR})
target_compile_definitions(lavender PUBLIC LAVENDER_VERSION_PATCH=${PROJECT_VERSION_PATCH})
target_compile_definitions(lavender PUBLIC LAVENDER_VERSION_TWEAK=${PROJECT_VERSION_TWEAK})

target_compile_definitions(lavender PUBLIC VULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1)
target_compile_definitions(lavender PUBLIC VULKAN_HPP_NO_CONSTRUCTORS=1)

target_link_libraries(lavender glfw concurrentqueue glm Boost::container Boost::unordered)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_options(lavender PUBLIC
        -Weverything
        -Wno-c++98-compat
        -Wno-c++98-compat-pedantic
        -Wno-c++20-compat
        -Wno-pre-c++20-compat-pedantic
        -Wno-covered-switch-default
        -Wno-ctad-maybe-unsupported
        -Wno-pre-c++17-compat
        -Wno-braced-scalar-init
        -Wno-unsafe-buffer-usage
    )

    if (CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
        # Add debug symbols that lldb can actually read
        target_compile_options(lavender PUBLIC -glldb)
        target_compile_options(lavender PUBLIC -gdwarf-4)
        target_compile_options(lavender PUBLIC -g3)

        # target_compile_options(lavender PUBLIC -fsanitize=thread)
        # target_link_options(lavender PUBLIC -fsanitize=thread)

        # target_compile_options(lavender PUBLIC -fsanitize=undefined)
        # target_link_options(lavender PUBLIC -fsanitize=undefined)
    endif ()

elseif (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    target_compile_options(lavender PUBLIC
        -Wno-braced-scalar-init
        -fsanitize=address
    )
    target_link_options(lavender PUBLIC -fsanitize=address)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
  # using Intel C++
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  # using Visual Studio C++
endif()

# find_program(CLANG_TIDY_EXE NAMES "clang-tidy" REQUIRED)
# set(CLANG_TIDY_COMMAND ${CLANG_TIDY_EXE} "--config-file=../.clang-tidy")
# set_target_properties(lavender PROPERTIES CXX_CLANG_TIDY "${CLANG_TIDY_COMMAND}")

find_package(Vulkan COMPONENTS glslc)
find_program(glslc_executable NAMES glslc HINTS Vulkan::glslc)
if (APPLE)
    target_link_libraries(lavender "-framework Cocoa -framework IOKit")
endif ()

function(compile_shader target)
    cmake_parse_arguments(PARSE_ARGV 1 arg "" "ENV;FORMAT;INCLUDE_DIRS" "SOURCES")
    foreach (source ${arg_SOURCES})
        add_custom_command(
                OUTPUT ${source}.${arg_FORMAT}
                DEPENDS ${source}
                DEPFILE ${source}.d
                COMMAND
                ${glslc_executable}
                $<$<BOOL:${arg_ENV}>:--target-env=${arg_ENV}>
                $<$<BOOL:${arg_SPV}>:--target-spv=${arg_SPV}>
                $<$<BOOL:${arg_FORMAT}>:-mfmt=${arg_FORMAT}>
                # $<$<BOOL:${arg_INCLUDE_DIRS}>:-I${CMAKE_SOURCE_DIR}/src/gfx/vulkan/shaders/include>
                -O -g # enable opts & debug symbols
                -MD -MF ${source}.d
                -o ${source}.${arg_FORMAT}
                ${CMAKE_CURRENT_SOURCE_DIR}/${source}
        )
        target_sources(${target} PRIVATE ${source}.${arg_FORMAT})
    endforeach ()
endfunction()

compile_shader(lavender
    ENV vulkan1.2
    SPV spv1.6
    FORMAT bin
    # INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/src/gfx/vulkan/shaders/include"
    SOURCES
    src/shaders/triangle.vert
    src/shaders/triangle.frag
)

cmrc_add_resource_library(
    lavender_resources
    ALIAS lav2
    NAMESPACE lav
    build/src/shaders/triangle.frag.bin
    build/src/shaders/triangle.vert.bin
)

target_link_libraries(lavender lav2)