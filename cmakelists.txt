cmake_minimum_required(VERSION 3.28)
project(lavender VERSION 0.0.0.0)

include(FetchContent)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

FetchContent_Declare(glfw
    GIT_REPOSITORY https://github.com/glfw/glfw
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(glfw)

FetchContent_Declare(concurrentqueue
    GIT_REPOSITORY https://github.com/cameron314/concurrentqueue
    GIT_TAG master
    GIT_SHALLOW TRUE
    SYSTEM
)
FetchContent_MakeAvailable(concurrentqueue)

find_package(Vulkan REQUIRED)

add_executable(lavender

    src/main.cpp

    src/gfx/vulkan/instance.cpp
    src/gfx/vulkan/device.cpp

    src/gfx/renderer.cpp
    src/gfx/window.cpp

    src/util/log.cpp
    src/util/misc.cpp
)

target_include_directories(lavender PUBLIC src)
target_include_directories(lavender SYSTEM PUBLIC ${Vulkan_INCLUDE_DIRS})

target_compile_definitions(lavender PUBLIC LAVENDER_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})
target_compile_definitions(lavender PUBLIC LAVENDER_VERSION_MINOR=${PROJECT_VERSION_MINOR})
target_compile_definitions(lavender PUBLIC LAVENDER_VERSION_PATCH=${PROJECT_VERSION_PATCH})
target_compile_definitions(lavender PUBLIC LAVENDER_VERSION_TWEAK=${PROJECT_VERSION_TWEAK})

target_compile_definitions(lavender PUBLIC VULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1)
target_compile_definitions(lavender PUBLIC VULKAN_HPP_NO_CONSTRUCTORS=1)

target_link_libraries(lavender glfw concurrentqueue)

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_options(lavender PUBLIC
        -Weverything
        -Wno-c++98-compat
        -Wno-c++98-compat-pedantic
        -Wno-c++20-compat
        -Wno-pre-c++20-compat-pedantic
        -Wno-covered-switch-default
        -Wno-ctad-maybe-unsupported
        -Wno-pre-c++17-compat
        -Wno-braced-scalar-init
        -Wno-unsafe-buffer-usage
        # -fsanitize=address
    )

    # target_link_options(lavender PUBLIC -fsanitize=address)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    target_compile_options(lavender PUBLIC
        -Wno-braced-scalar-init
        -fsanitize=address
    )
    target_link_options(lavender PUBLIC -fsanitize=address)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
  # using Intel C++
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  # using Visual Studio C++
endif()

# find_program(CLANG_TIDY_EXE NAMES "clang-tidy" REQUIRED)
# set(CLANG_TIDY_COMMAND ${CLANG_TIDY_EXE} "--config-file=../.clang-tidy")
# set_target_properties(lavender PROPERTIES CXX_CLANG_TIDY "${CLANG_TIDY_COMMAND}")